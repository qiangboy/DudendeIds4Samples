version: '3.4'

services:
  identityserverwithspalogin1:
    container_name: ids-1
    image: ${DOCKER_REGISTRY-}identityserverwithspalogin
    build:
      context: .
      dockerfile: IdentityServerWithSpaLogin/Dockerfile
    depends_on:
      - mysql
      - nginx
      - redis
    networks:
      - mynet

  identityserverwithspalogin2:
    container_name: ids-2
    image: ${DOCKER_REGISTRY-}identityserverwithspalogin
    build:
      context: .
      dockerfile: IdentityServerWithSpaLogin/Dockerfile
    depends_on:
      - mysql
      - nginx
      - redis
    networks:
      - mynet


  jsclientweb:
    container_name: jsclientweb
    image: ${DOCKER_REGISTRY-}jsclientweb
    build:
      context: .
      dockerfile: JsClientWeb/Dockerfile
    networks:
      - mynet


  productservice:
    container_name: productservice
    image: ${DOCKER_REGISTRY-}productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    networks:
      - mynet


  orderservice:
    container_name: orderservice
    image: ${DOCKER_REGISTRY-}orderservice
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    networks:
      - mynet


  mysql:
    container_name: mysql
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: test
      MYSQL_PASSWORD: 123456
    # ports:
    #   - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    networks:
      - mynet


  nginx:
    container_name: nginx
    image: nginx
    restart: always
    ports:
      - 5000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - mynet


  redis:
    container_name: redis
    image: redis:latest
    restart: always
    command: redis-server --requirepass 123456
    # ports:
    #   - 6379:6379
    volumes:
      - ./redis_data:/data
    networks:
      - mynet


networks:
  mynet:
    driver: bridge

